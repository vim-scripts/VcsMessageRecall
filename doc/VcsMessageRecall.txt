*VcsMessageRecall.txt*	Browse and re-insert previous VCS commit messages.

		     VCS MESSAGE RECALL    by Ingo Karkat
							*VcsMessageRecall.vim*
description			|VcsMessageRecall-description|
usage				|VcsMessageRecall-usage|
installation			|VcsMessageRecall-installation|
configuration			|VcsMessageRecall-configuration|
integration			|VcsMessageRecall-integration|
limitations			|VcsMessageRecall-limitations|
known problems			|VcsMessageRecall-known-problems|
todo				|VcsMessageRecall-todo|
history				|VcsMessageRecall-history|

==============================================================================
DESCRIPTION					*VcsMessageRecall-description*

This plugin automatically persists commit messages from Git, Mercurial,
Subversion (and potentially other version control systems) when Vim is invoked
as the commit message editor. It sets up mappings and commands to iterate
through stored past messages, and recall the contents (without the boilerplate
text at the bottom of each message) for use in the currently edited message.
This way, you automatically collect a history of (committed or aborted) past
messages, and can quickly base your current message on contents recalled from
that history.

SEE ALSO								     *

RELATED WORKS								     *

==============================================================================
USAGE						      *VcsMessageRecall-usage*

See |MessageRecall-message-usage| for the available mappings and commands.

The commit messages are stored separately for each repository, no matter from
which subdirectory of the repository you're committing. The location of the
message store is
    {.git,.hg,.svn}/commit-msgs/
As repositories typically contain totally different projects, it's unlikely
that you need to recall messages from a different repository, but if you need
to, you can still pass that path to the |:MessageRecall| command, or even
reconfigure the plugin to use a single, global message store.


EXAMPLE						    *VcsMessageRecall-example*

You commit a set of changes via "git commit". Vim is invoked on the
.git/COMMIT_EDITMSG file, which so far just shows the boilerplate comments at
the bottom of the file.
You press CTRL-P to recall the previous commit message, because this commit is
related to it, and you want to re-use parts of its description. The previous
commit message is inserted above the boilerplate.
Was it that message? You browse through some more via CTRL-P and CTRL-N, then
start editing. Oh, there also was some useful information in the third last
commit. A 3_CTRL-P opens that message in the preview window (because your
current message is now modified, and therefore won't be replaced).
From there, you yank and paste the sentence into your current commit message.
You could have also incorporated the entire message via :3MessageRecall,
either from the preview window, or directly inside the current message.

Finally, you finish your message. But DUH! you actually forgot to fix
something. You bail out via |:cquit|!, and Git aborts the commit. Nothing is
lost, though. On the next try, a simple CTRL-P or :MessageRecall will retrieve
your carefully crafted text.

==============================================================================
INSTALLATION				       *VcsMessageRecall-installation*

This script is packaged as a |vimball|. If you have the "gunzip" decompressor
in your PATH, simply edit the *.vba.gz package in Vim; otherwise, decompress
the archive first, e.g. using WinZip. Inside Vim, install by sourcing the
vimball or via the |:UseVimball| command. >
    vim VcsMessageRecall.vba.gz
    :so %
To uninstall, use the |:RmVimball| command.

DEPENDENCIES				       *VcsMessageRecall-dependencies*

- Requires Vim 7.0 or higher.
- Requires the EditSimilar plugin (vimscript #2544), version 2.00 or higher.
- Requires the BufferPersist plugin (vimscript #4115).
- Requires the MessageRecall plugin (vimscript #4116).

==============================================================================
CONFIGURATION				      *VcsMessageRecall-configuration*

You can override the autocmds after the plugin has been sourced, e.g. in a
file .vim/after/plugin/VcsMessageRecall.vim
For example, to use a single, global message store for all Subversion commits: >
    autocmd! VcsMessageRecall FileType svn,svn.*
    \	call MessageRecall#Setup($HOME . '/.svn-commit-msgs',
    \	    {'whenRangeNoMatch': 'all', 'range': '1,1/^\n*--This line, and those below, will be ignored--/-1'})
<

If you use a localized version of the VCS utilities, you have to adapt the
patterns for the boilerplate detection.

==============================================================================
INTEGRATION					*VcsMessageRecall-integration*

==============================================================================
LIMITATIONS					*VcsMessageRecall-limitations*

KNOWN PROBLEMS				     *VcsMessageRecall-known-problems*

TODO						       *VcsMessageRecall-todo*

IDEAS						      *VcsMessageRecall-ideas*

==============================================================================
HISTORY						    *VcsMessageRecall-history*

1.01	25-Jun-2012
Revise range regexp to avoid capturing an empty line before (more empty lines
before) the boilerplate, and to avoid capturing the first line of the
boilerplate when at line 1.

1.00	25-Jun-2012
First published version.

0.01	18-Jun-2012
Started development.

==============================================================================
Copyright: (C) 2012 Ingo Karkat
The VIM LICENSE applies to this script; see |copyright|.

Maintainer:	Ingo Karkat <ingo@karkat.de>
==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
